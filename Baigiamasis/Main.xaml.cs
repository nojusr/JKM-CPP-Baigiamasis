using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using Microsoft.Win32;


using MySql.Data.MySqlClient;
using MySql.Data.Types;

//TODO: padaryti kad nebutu galima istrinti nuomininku/operatoriu, kurie yra
//naudojami objektuose



namespace Baigiamasis {


    public partial class Window1 : Window {


        private string connStr = "server=localhost;user id=root;database=jkm_baig;charset=utf8";

        //---------------------------------------------------------------------------------------
        //pagrindinis langas
        public Window1() {
            InitializeComponent();

            MySqlConnection conn = new MySqlConnection(connStr);
            try {
                conn.Open();
                reloadNuomininkai(conn);
                reloadOperatoriai(conn);
                reloadObjektai(conn);
            } catch (Exception ex) {
                MessageBox.Show("Nepavyko prisijungti prie MySQL duombazės: " + ex.ToString(), "Klaida");
                Application.Current.Shutdown(1);
            }

        }


        //---------------------------------------------------------------------------------------
        //BENDROS FUNKCIJOS
        //---------------------------------------------------------------------------------------

        Color clean = (Color)ColorConverter.ConvertFromString("#FFABADB3");

        //gauna paskutini aplskliausta skaiciu is string
        //pvz: asdf1234543(1234)(4444)asdf(55) grazins 55
        private string get_strid(string input) {
            string buf = "null";
            for (int i = 0; i < input.Length; i++) {
                if (input[i] == '(') {
                    buf = "";
                    i++;
                    while (input[i] != ')') {
                        buf += input[i];
                        i++;
                    }
                }
            }

            return buf;
        }

        //tikrina ar yra ivestas skaicius i textbox
        private bool chkTextBoxNum(TextBox check, bool correct) {
            if (correct) {
                double chk;
                if (check.Text != "" && double.TryParse(check.Text, out chk)) {
                    check.BorderBrush = new SolidColorBrush(clean);
                } else {
                    check.BorderBrush = new SolidColorBrush(Colors.Red);
                    correct = false;
                }
            }
            return correct;
        }

        //tikrina ar yra bet kas ivestas i textbox
        private bool chkTextBox(TextBox check, bool correct) {
            if (correct) {
                if (check.Text != " ") {
                    check.BorderBrush = new SolidColorBrush(clean);
                } else {
                    check.BorderBrush = new SolidColorBrush(Colors.Red);
                    correct = false;
                }
            }
            return correct;
        }

        //tikrina ar kazkas yra pasirinkta combobox'e
        private bool chkComboBox(ComboBox check, Label title, bool correct) {
            if (correct) {
                if (check.Text != "") {
                    title.Foreground = new SolidColorBrush(Colors.Black);
                } else {
                    title.Foreground = new SolidColorBrush(Colors.Red);
                    correct = false;
                }
            }
            return correct;
        }

        //---------------------------------------------------------------------------------------
        //NUOMININKAI
        //---------------------------------------------------------------------------------------
        DataSet n_data = new DataSet();

        //nuomininku datagrid parodymo funkcija
        private void reloadNuomininkai(MySqlConnection conn) {

            string sql = "SELECT * FROM nuomininkai";
            MySqlDataAdapter adp = new MySqlDataAdapter(sql, conn);

            n_data.Clear();

            adp.Fill(n_data, "NuomininkaiDataBinding");
            nuomininkai.DataContext = n_data;
        }


        //sukuria tinkamus pavadinimus nuominiku dataGrid
        private void nuomininkai_AutoGeneratedColumns_1(object sender, EventArgs e) {
            nuomininkai.Columns[0].Header = "ID";
            nuomininkai.Columns[1].Header = "Vardas";
            nuomininkai.Columns[2].Header = "Pavardė";
            nuomininkai.Columns[3].Header = "Tel. nr.";
            nuomininkai.Columns[4].Header = "E. paštas";
            nuomininkai.Columns[5].Header = "Asmens kodas";
            nuomininkai.Columns[6].Header = "Deklaruota gyvenvietė";
        }

        //trina nuomininkus
        private void deleteNuomininkai(object sender, RoutedEventArgs e) {
            MySqlConnection conn = new MySqlConnection(connStr);
            conn.Open();

            for (int i = 0; i < nuomininkai.SelectedItems.Count; i++) {
                DataRowView eile = (DataRowView)nuomininkai.SelectedItems[i];
                string sql = "DELETE FROM nuomininkai WHERE nid=" + eile["nid"].ToString();
                MySqlCommand comm = new MySqlCommand(sql, conn);
                comm.ExecuteNonQuery();
            }

            reloadNuomininkai(conn);
            conn.Close();      
        }


        //atidaro langa, su kuriuo keicia nuominikus
        private void editNuomininkai(object sender, RoutedEventArgs e) {
            if (nuomininkai.SelectedItems.Count > 0) {
                MySqlConnection conn = new MySqlConnection(connStr);
                conn.Open();

                DataRowView eile = (DataRowView)nuomininkai.SelectedItems[0];
                string nid = eile["nid"].ToString();

                editNuomininkas edit = new editNuomininkas(nid);
                edit.ShowDialog();

                reloadNuomininkai(conn);
                conn.Close();
            }
        }



        private void pridetiNuomininka(object sender, RoutedEventArgs e) {

            
            bool correct = true;

            correct = chkTextBox(n_vard, correct);
            correct = chkTextBox(n_pav, correct);
            correct = chkTextBox(n_telnr, correct);
            correct = chkTextBox(n_email, correct);
            correct = chkTextBoxNum(n_asmkod, correct);

            if (correct) {

                MySqlConnection conn = new MySqlConnection(connStr);
                string sql = "INSERT INTO nuomininkai (`nid`, `vard`, `pav`, `tel_num`, `email`, `asm_kod`, `dek_gyv`) VALUES (NULL, @vard, @pav, @tel_num, @email, @asm_kod, @dek_gyv);";

                MySqlCommand comm = new MySqlCommand(sql, conn);
                comm.Parameters.AddWithValue("@vard", n_vard.Text);
                comm.Parameters.AddWithValue("@pav", n_pav.Text);
                comm.Parameters.AddWithValue("@tel_num", n_telnr.Text);
                comm.Parameters.AddWithValue("@email", n_email.Text);
                comm.Parameters.AddWithValue("@asm_kod", n_asmkod.Text);
                comm.Parameters.AddWithValue("@dek_gyv", n_dekgyv.Text);


                try {
                    conn.Open();
                    comm.ExecuteNonQuery();
                    reloadNuomininkai(conn);
                    conn.Close();

                } catch (Exception ex) {
                    MessageBox.Show("Klaida: " + ex.ToString(), "");
                    conn.Close();
                }
            }
        }

        //paieska
        private void searchNuomininkai(object sender, TextChangedEventArgs e) {
            MySqlConnection conn = new MySqlConnection(connStr);
            if (n_search.Text != "") {
                
                string q = n_search.Text;

                string sql = "SELECT * FROM nuomininkai WHERE (nid LIKE @text OR vard LIKE @text OR pav LIKE @text OR tel_num like @text OR email LIKE @text OR asm_kod LIKE @text OR dek_gyv LIKE @text);";

                MySqlCommand comm = new MySqlCommand(sql, conn);
                comm.Parameters.AddWithValue("@text", '%'+ n_search.Text + '%');

                MySqlDataAdapter adp = new MySqlDataAdapter(comm);
                n_data.Clear();


                adp.Fill(n_data, "NuomininkaiDataBinding");
                nuomininkai.DataContext = n_data;
            }
            else{
                reloadNuomininkai(conn);
            }
        }

        //---------------------------------------------------------------------------------------
        //OPERATORIAI
        //---------------------------------------------------------------------------------------

        DataSet o_data = new DataSet();
        
        //dataGrid perkovimo funkcija
        private void reloadOperatoriai(MySqlConnection conn) {

            string sql = "SELECT * FROM operatoriai";
            MySqlDataAdapter adp = new MySqlDataAdapter(sql, conn);

            o_data.Clear();

            adp.Fill(o_data, "OperatoriaiDataBinding");
            operatoriai.DataContext = o_data;
        }


        //sukuria column'u pavadinimus operatoriu datagrid
        private void operatoriai_AutoGeneratedColumns_1(object sender, EventArgs e) {
            operatoriai.Columns[0].Header = "ID";
            operatoriai.Columns[1].Header = "Pavadinimas";
            operatoriai.Columns[2].Header = "Tipas";
            operatoriai.Columns[3].Header = "Kaina";
            operatoriai.Columns[4].Header = "Kada pakeista";
        }

        private void pridetiOperatoriai(object sender, RoutedEventArgs e) {

            bool correct = true;

            correct = chkTextBox(o_pav, correct);
            correct = chkComboBox(o_tipas, op_type_label, correct);
            correct = chkTextBoxNum(o_rate, correct);

            if (correct) {
                MySqlConnection conn = new MySqlConnection(connStr);

                string sql = "INSERT INTO operatoriai (`oid`, `op_pav`, `op_type`, `op_rate`, `last_updated`) VALUES (NULL, @pav, @type, @rate, @last_updated);";

                MySqlCommand comm = new MySqlCommand(sql, conn);
                comm.Parameters.AddWithValue("@pav", o_pav.Text);
                comm.Parameters.AddWithValue("@type", o_tipas.Text);
                comm.Parameters.AddWithValue("@rate", o_rate.Text);
                comm.Parameters.AddWithValue("@last_updated", DateTime.Now);

                try {
                    conn.Open();
                    comm.ExecuteNonQuery();
                    reloadOperatoriai(conn);
                    conn.Close();

                } catch (Exception ex) {
                    MessageBox.Show("Klaida: " + ex.ToString(), "");
                    conn.Close();
                }
            }
        }

        //naikina operatorius
        private void deleteOperatoriai(object sender, RoutedEventArgs e) {
            MySqlConnection conn = new MySqlConnection(connStr);
            conn.Open();

            for (int i = 0; i < operatoriai.SelectedItems.Count; i++) {
                DataRowView eile = (DataRowView)operatoriai.SelectedItems[i];
                string sql = "DELETE FROM operatoriai WHERE oid=" + eile["oid"].ToString();
                MySqlCommand comm = new MySqlCommand(sql, conn);
                comm.ExecuteNonQuery();
            }

            reloadOperatoriai(conn);
            conn.Close();  
 
        }

        //atidaro langa keisti operatoriams
        private void editOperatoriai(object sender, RoutedEventArgs e) {
            if (operatoriai.SelectedItems.Count > 0) {
                MySqlConnection conn = new MySqlConnection(connStr);
                conn.Open();

                DataRowView eile = (DataRowView)operatoriai.SelectedItems[0];
                string oid = eile["oid"].ToString();

                editOperatorius edit = new editOperatorius(oid);
                edit.ShowDialog();

                reloadOperatoriai(conn);
                conn.Close();
            }
        }

        //paieska
        private void searchOperatoriai(object sender, TextChangedEventArgs e) {
            MySqlConnection conn = new MySqlConnection(connStr);
            if (o_search.Text != "") {


                string sql = "SELECT * FROM operatoriai WHERE (oid LIKE @text OR op_pav LIKE @text OR op_type LIKE @text OR op_rate like @text OR last_updated LIKE @text);";

                MySqlCommand comm = new MySqlCommand(sql, conn);
                comm.Parameters.AddWithValue("@text", '%' + o_search.Text + '%');

                MySqlDataAdapter adp = new MySqlDataAdapter(comm);
                o_data.Clear();

                adp.Fill(o_data, "OperatoriaiDataBinding");
                operatoriai.DataContext = o_data;

            } else {
                reloadOperatoriai(conn);
            }
        }


        //---------------------------------------------------------------------------------------
        //OBJEKTAI
        //---------------------------------------------------------------------------------------

        //TODO
        //paieska
        private void searchObjektai(object sender, TextChangedEventArgs e) {
        }




        //perkrauna visus objektis
        private void reloadObjektai(MySqlConnection conn) {

            objektai.Items.Clear();

            string sql = "SELECT * FROM objektai";
            MySqlCommand comm = new MySqlCommand(sql, conn);

            MySqlDataReader eil = comm.ExecuteReader();

            while (eil.Read()) {
                Objektas ob = new Objektas();
                ob.clear();
                ob.ID = Int32.Parse(eil["obid"].ToString());
                ob.Kvad = Double.Parse(eil["ob_kvad"].ToString());
                ob.Nuoma = Double.Parse(eil["Nuoma"].ToString());
                ob.Address = eil["ob_addr"].ToString();
                ob.corr_nid = Int32.Parse(eil["corr_nid"].ToString());
                ob.ce_oid = Int32.Parse(eil["ce_oid"].ToString());
                ob.cd_oid = Int32.Parse(eil["cd_oid"].ToString());
                ob.cv_oid = Int32.Parse(eil["cv_oid"].ToString());
                ob.ci_oid = Int32.Parse(eil["ci_oid"].ToString());
                ob.set_variables();

                objektai.Items.Add(ob);
                
            }

            conn.Close();  
        }

        private void pridetiObjekta(object sender, RoutedEventArgs e) {

            bool correct = true;

            correct = chkTextBox(ob_addr, correct);
            correct = chkTextBoxNum(ob_plot, correct);
            correct = chkTextBoxNum(ob_nkaina, correct);
            correct = chkComboBox(ob_nuomininkai, ob_nuomininkai_label, correct);

            if (correct) {



                MySqlConnection conn = new MySqlConnection(connStr);
                string sql = "INSERT INTO objektai (`obid`, `ob_addr`, `ob_kvad`, `Nuoma`,  `corr_nid`, `ce_oid`, `cd_oid`, `cv_oid`, `ci_oid` ) VALUES (NULL, @addr, @kvad, @nuom, @nid, @eoid, @doid, @void, @ioid );";

                MySqlCommand comm = new MySqlCommand(sql, conn);
                comm.Parameters.AddWithValue("@addr", ob_addr.Text);
                comm.Parameters.AddWithValue("@kvad", ob_plot.Text);
                comm.Parameters.AddWithValue("@nuom", ob_nkaina.Text);
                comm.Parameters.AddWithValue("@nid", get_strid(ob_nuomininkai.Text));
                comm.Parameters.AddWithValue("@eoid", get_strid(ob_eoid.Text));
                comm.Parameters.AddWithValue("@doid", get_strid(ob_doid.Text));
                comm.Parameters.AddWithValue("@void", get_strid(ob_void.Text));
                comm.Parameters.AddWithValue("@ioid", get_strid(ob_ioid.Text));
                try {
                    conn.Open();
                    comm.ExecuteNonQuery();
                    reloadObjektai(conn);

                } catch (Exception ex) {
                    MessageBox.Show("Klaida: " + ex.ToString(), "");
                }


                sql = "SELECT obid FROM objektai ORDER BY obid DESC LIMIT 1 ";


                comm = new MySqlCommand(sql, conn);
                conn.Open();
                MySqlDataReader data = comm.ExecuteReader();

                string id = "";

                while (data.Read()) {
                    id = data["obid"].ToString();
                }


                data.Dispose();



                sql = "CREATE TABLE ben_" + id + " ( kmokid  INTEGER NOT NULL AUTO_INCREMENT , timestamp TIMESTAMP NOT NULL , PRIMARY KEY (kmokid)) ENGINE = InnoDB;";
                comm = new MySqlCommand(sql, conn);
                comm.ExecuteNonQuery();
                conn.Close();
            }
        
        }

        private void editObjektas(object sender, RoutedEventArgs e) {
            if (objektai.SelectedItems.Count > 0) {
                MySqlConnection conn = new MySqlConnection(connStr);
                conn.Open();

                Objektas eile = (Objektas)objektai.SelectedItems[0];
                string obid = eile.ID.ToString();

                editObjektas edit = new editObjektas(obid);
                edit.ShowDialog();

                reloadObjektai(conn);
                conn.Close();
            }       
        }

        //atidaro bendrijos mokesciu langa
        private void editBenMok(object sender, RoutedEventArgs e) {
            MySqlConnection conn = new MySqlConnection(connStr);
            conn.Open();

            string obid = "";

            if (objektai.SelectedItems.Count > 0) {

                Objektas ob = (Objektas)objektai.SelectedItems[0];
                obid = ob.ID.ToString();
            }



            editBendrijosmok edit = new editBendrijosmok(obid);
            edit.ShowDialog();
            reloadObjektai(conn);
            conn.Close();

        }

        private void deleteObjektas(object sender, RoutedEventArgs e) {
            MySqlConnection conn = new MySqlConnection(connStr);
            conn.Open();

            for (int i = 0; i < objektai.SelectedItems.Count; i++) {

                Objektas ob = (Objektas)objektai.SelectedItems[i];
                string obid = ob.ID.ToString();

                string sql = "DELETE FROM objektai WHERE obid=" + obid;
                MySqlCommand comm = new MySqlCommand(sql, conn);
                comm.ExecuteNonQuery();

                sql = "DROP TABLE ben_" + obid;

                comm = new MySqlCommand(sql, conn);
                comm.ExecuteNonQuery();


            }

            reloadObjektai(conn);
            conn.Close();             
        }


        //užkrauna nuomininkus ir operatorius į visus combobox'us, kai
        //atidarai objektų langelį
        private void obLoadComboBox(object sender, MouseEventArgs e) {
            MySqlConnection conn = new MySqlConnection(connStr);
            ob_nuomininkai.Items.Clear();
            ob_void.Items.Clear();
            ob_doid.Items.Clear();
            ob_eoid.Items.Clear();
            ob_ioid.Items.Clear();


            conn.Open();

            //nuomininkai
            string sql = "SELECT nid, vard, pav FROM nuomininkai;";
            MySqlCommand comm = new MySqlCommand(sql, conn);
            MySqlDataReader data = comm.ExecuteReader();
            
            string buf;

            while (data.Read()) {
                buf = data["vard"].ToString();
                buf += " " + data["pav"].ToString();
                buf += " (" + data["nid"].ToString() + ")";
                ob_nuomininkai.Items.Add(buf);
            }

            //vanduo

            sql = "SELECT oid, op_pav FROM operatoriai WHERE op_type='Vanduo';";
            comm = new MySqlCommand(sql, conn);
            data.Dispose();
            data = comm.ExecuteReader();

            while (data.Read()) {
                buf = data["op_pav"].ToString();
                buf += " (" + data["oid"].ToString() + ")";
                ob_void.Items.Add(buf);
            }

            //dujos/siluma

            sql = "SELECT oid, op_pav FROM operatoriai WHERE op_type='Dujos';";
            comm = new MySqlCommand(sql, conn);
            data.Dispose();
            data = comm.ExecuteReader();

            while (data.Read()) {
                buf = data["op_pav"].ToString();
                buf += " (" + data["oid"].ToString() + ")";
                ob_doid.Items.Add(buf);
            }

            //elektra

            sql = "SELECT oid, op_pav FROM operatoriai WHERE op_type='Elektra';";
            comm = new MySqlCommand(sql, conn);
            data.Dispose();
            data = comm.ExecuteReader();

            while (data.Read()) {
                buf = data["op_pav"].ToString();
                buf += " (" + data["oid"].ToString() + ")";
                ob_eoid.Items.Add(buf);
            }

            //internetas

            sql = "SELECT oid, op_pav FROM operatoriai WHERE op_type='Internetas';";
            comm = new MySqlCommand(sql, conn);
            data.Dispose();
            data = comm.ExecuteReader();

            while (data.Read()) {
                buf = data["op_pav"].ToString();
                buf += " (" + data["oid"].ToString() + ")";
                ob_ioid.Items.Add(buf);
            }
            conn.Close();
            data.Close();
        }

        //---------------------------------------------------------------------------------------
        //ISVESTIS
        //---------------------------------------------------------------------------------------


        //kvieciama isvesties klase
        pdfIsvestis output = new pdfIsvestis();


        //pakeitimai .net sugeneruotiems stulpeliams
        private void out_bend_AutoGeneratedColumns_1(object sender, EventArgs e) {
            out_bend.CanUserAddRows = false;

            out_bend.Columns[0].Header = "Pavadinimas";
            out_bend.Columns[0].IsReadOnly = true;
            out_bend.Columns[1].Header = "Kaina (Eur)";
            out_bend.Columns[1].Width = 70;
        }

        //uzkrauna objektus i isvesties combobox

        private void loadOutObComboBox(object sender, MouseEventArgs e) {
            MySqlConnection conn = new MySqlConnection(connStr);
            out_ob.Items.Clear();


            conn.Open();

            string sql = "SELECT ob_addr, obid FROM objektai;";
            MySqlCommand comm = new MySqlCommand(sql, conn);
            MySqlDataReader data = comm.ExecuteReader();

            string buf;

            while (data.Read()){
                buf = data["ob_addr"].ToString();
                buf += " (" + data["obid"].ToString() + ")";
                out_ob.Items.Add(buf);
            }
            out_ob_label.Foreground = new SolidColorBrush(Colors.Black);
        }

        //uzkrauna pasirinkta objekta i isvesties langa

        private void loadOutObjektas(object sender, EventArgs e) {
            string obid = get_strid(out_ob.Text);
            if (obid != "null") {
                MySqlConnection conn = new MySqlConnection(connStr);
                Objektas ob = new Objektas();


                conn.Open();

                //komunaliniai
                string sql = "SELECT corr_nid, ce_oid, cd_oid, cv_oid, ci_oid FROM objektai WHERE obid =" + obid + ";";

                MySqlCommand comm = new MySqlCommand(sql, conn);
                MySqlDataReader data = comm.ExecuteReader();




                while (data.Read()) {

                    ob.clear();
                    ob.ID = Int32.Parse(obid);
                    ob.corr_nid = Int32.Parse(data["corr_nid"].ToString());
                    ob.ce_oid = Int32.Parse(data["ce_oid"].ToString());
                    ob.cd_oid = Int32.Parse(data["cd_oid"].ToString());
                    ob.cv_oid = Int32.Parse(data["cv_oid"].ToString());
                    ob.ci_oid = Int32.Parse(data["ci_oid"].ToString());
                    ob.set_variables();
                }

                out_e_title.Content = "Elektra ( " + ob.Elek.ToString() + " ):";
                out_d_title.Content = "Dujos/šiluma ( " + ob.Duj.ToString() + " ):";
                out_v_title.Content = "Vanduo ( " + ob.Vand.ToString() + " ):";
                out_i_title.Content = "Internetas ( " + ob.Int.ToString() + " ):";

                //reikia pavaizutoti interneto kaina, nes ji nekinta

                sql = "SELECT op_rate FROM operatoriai WHERE oid=" + ob.ci_oid.ToString() + ";";
                comm = new MySqlCommand(sql, conn);
                data.Dispose();

                data = comm.ExecuteReader();
                while (data.Read()) {
                    out_i.Text = data["op_rate"].ToString();
                }

                //bendrijos



                List<BendrMok> ben = new List<BendrMok>();

                sql = "SHOW COLUMNS FROM ben_" + obid + ";";
                comm = new MySqlCommand(sql, conn);
                data.Dispose();
                data = comm.ExecuteReader();

                while (data.Read()) {
                    if (data["Field"].ToString() != "timestamp" && data["Field"].ToString() != "kmokid") {
                        BendrMok buf = new BendrMok();
                        buf.Pavadinimas = data["Field"].ToString();
                        buf.Kaina = 0;
                        ben.Add(buf);


                    }
                }


                sql = "SELECT * FROM ben_" + obid + " ORDER BY kmokid DESC LIMIT 1;";
                comm = new MySqlCommand(sql, conn);
                data.Dispose();
                data = comm.ExecuteReader();

                int count = 0;
                string name;

                while (data.Read()) { 
                    name = ben[count].Pavadinimas.ToString();
                    ben[count].Kaina = Double.Parse(data[name].ToString());


                    count++;
                }
                out_bend.ItemsSource = ben;
                conn.Close();
            }

        }


        //parenka isvesties vieta

        private void outFilePicker(object sender, RoutedEventArgs e) {
            SaveFileDialog outfpicker = new SaveFileDialog();
            outfpicker.Filter = "PDF|*.pdf";
            outfpicker.Title = "Pasirinkite, kur išsaugoti failus";
            if (outfpicker.ShowDialog() == true) {
                output.filename = outfpicker.FileName;
                out_filebutton.BorderBrush = new SolidColorBrush(Colors.Gray);
            }

        }




        //galutinė išvestis

        private void finalOutput(object sender, RoutedEventArgs e) {
            MySqlConnection conn = new MySqlConnection(connStr);
            bool correct = true;

            correct = chkComboBox(out_ob, out_ob_label, correct);
            correct = chkTextBoxNum(out_e, correct);
            correct = chkTextBoxNum(out_d, correct);
            correct = chkTextBoxNum(out_v, correct);
            correct = chkTextBoxNum(out_i, correct);



            if (output.filename != null && correct) {
                output.obid = Int32.Parse(get_strid(out_ob.Text));
                output.elek = Double.Parse(out_e.Text);
                output.duj = Double.Parse(out_d.Text);
                output.vand = Double.Parse(out_v.Text);
                output.inter = Double.Parse(out_i.Text);

                for (int i = 0; i < out_bend.Items.Count; i++) {
                    BendrMok eile = (BendrMok)out_bend.Items[i];
                    output.bendrpav.Add(eile.Pavadinimas);
                    output.bendrkain.Add(eile.Kaina);
                }

                output.Generate(conn);
                output.Clear();
            } else if (output.filename == null) {
                out_filebutton.BorderBrush = new SolidColorBrush(Colors.Red);
            }
        }
    }
}
